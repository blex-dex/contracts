{
  "_format": "ethers-rs-sol-cache-3",
  "paths": {
    "artifacts": "out",
    "build_infos": "out/build-info",
    "sources": "contracts",
    "tests": "foundry_test",
    "scripts": "script",
    "libraries": [
      "lib",
      "node_modules"
    ]
  },
  "files": {
    "contracts/ac/Ac.sol": {
      "lastModificationDate": 1698202259863,
      "contentHash": "4ed4c8383d4400e68243085b1565d68f",
      "sourceName": "contracts/ac/Ac.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Ac": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Ac.sol/Ac.json"
        }
      }
    },
    "contracts/ac/AcUpgradable.sol": {
      "lastModificationDate": 1698202259864,
      "contentHash": "efc583773c9c4029b7453019e1c148bd",
      "sourceName": "contracts/ac/AcUpgradable.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "AcUpgradable": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "AcUpgradable.sol/AcUpgradable.json"
        }
      }
    },
    "contracts/am/AutoManager.sol": {
      "lastModificationDate": 1698203541886,
      "contentHash": "2ab6c580fa9c8b76380e52a08777d529",
      "sourceName": "contracts/am/AutoManager.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/am/interfaces/IKeeperRegistry.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "AutoManager": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "AutoManager.sol/AutoManager.json"
        }
      }
    },
    "contracts/am/AutoOrder.sol": {
      "lastModificationDate": 1698203256447,
      "contentHash": "912434b9bad57d06c75c4462c69dedf1",
      "sourceName": "contracts/am/AutoOrder.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol"
      ],
      "versionRequirement": "^0.8.7",
      "artifacts": {
        "AutoOrder": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "AutoOrder.sol/AutoOrder.json"
        },
        "AutoOrderBase": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "AutoOrder.sol/AutoOrderBase.json"
        },
        "AutoOrderMock": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "AutoOrder.sol/AutoOrderMock.json"
        }
      }
    },
    "contracts/am/AutoPrice.sol": {
      "lastModificationDate": 1698203722816,
      "contentHash": "9e840e0cd164603eb17a6926df7641e1",
      "sourceName": "contracts/am/AutoPrice.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/oracle/interfaces/IChainPriceFeed.sol",
        "contracts/oracle/interfaces/IFastPriceFeed.sol",
        "node_modules/@chainlink/contracts/src/v0.8/Chainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/ChainlinkClient.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol"
      ],
      "versionRequirement": "^0.8.7",
      "artifacts": {
        "AutoPrice": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "AutoPrice.sol/AutoPrice.json"
        }
      }
    },
    "contracts/am/autoLiquidate.sol": {
      "lastModificationDate": 1698203518994,
      "contentHash": "ecf49d7ed9a4ab040259a88062d4f0a6",
      "sourceName": "contracts/am/autoLiquidate.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.7",
      "artifacts": {
        "AutoLiquidate": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "autoLiquidate.sol/AutoLiquidate.json"
        },
        "AutoLiquidateBase": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "autoLiquidate.sol/AutoLiquidateBase.json"
        },
        "AutoLiquidateMock": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "autoLiquidate.sol/AutoLiquidateMock.json"
        }
      }
    },
    "contracts/am/interfaces/IKeeperRegistry.sol": {
      "lastModificationDate": 1698202352420,
      "contentHash": "c1fa77958fb625d1421f66a68ebaa35f",
      "sourceName": "contracts/am/interfaces/IKeeperRegistry.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IKeeperRegistry": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "interfaces/IKeeperRegistry.sol/IKeeperRegistry.json"
        },
        "KeeperRegistryBaseInterface": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "interfaces/IKeeperRegistry.sol/KeeperRegistryBaseInterface.json"
        }
      }
    },
    "contracts/am/interfaces/ILinkToken.sol": {
      "lastModificationDate": 1698202352420,
      "contentHash": "649d108c5d1aed7a1a56f71ac7fb6e8d",
      "sourceName": "contracts/am/interfaces/ILinkToken.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ILinkToken": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "interfaces/ILinkToken.sol/ILinkToken.json"
        }
      }
    },
    "contracts/am/price.sol": {
      "lastModificationDate": 1698203746373,
      "contentHash": "9294e0343e4b217db38b34d91141114d",
      "sourceName": "contracts/am/price.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/oracle/interfaces/IChainPriceFeed.sol",
        "contracts/oracle/interfaces/IFastPriceFeed.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "node_modules/@chainlink/contracts/src/v0.8/Chainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/ChainlinkClient.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol"
      ],
      "versionRequirement": "^0.8.7",
      "artifacts": {
        "AutoPriceV2": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "price.sol/AutoPriceV2.json"
        }
      }
    },
    "contracts/fee/FeeRouter.sol": {
      "lastModificationDate": 1698203642904,
      "contentHash": "59e0f80821f3f142accb88a5b2179e4c",
      "sourceName": "contracts/fee/FeeRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/interfaces/IFundFee.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/TransferHelper.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "FeeRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "FeeRouter.sol/FeeRouter.json"
        }
      }
    },
    "contracts/fee/FeeVault.sol": {
      "lastModificationDate": 1694677584555,
      "contentHash": "fd58e433200428da3b767213b609c5da",
      "sourceName": "contracts/fee/FeeVault.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "FeeVault": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "FeeVault.sol/FeeVault.json"
        }
      }
    },
    "contracts/fee/FundFee.sol": {
      "lastModificationDate": 1698202259864,
      "contentHash": "f5acba8eb323af02cd02ef91ba64f806",
      "sourceName": "contracts/fee/FundFee.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/FundFeeStore.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/lib/FundingRateCalculator.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/market/interfaces/IMarketReader.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/Calc.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "FundFee": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "FundFee.sol/FundFee.json"
        }
      }
    },
    "contracts/fee/FundFeeStore.sol": {
      "lastModificationDate": 1698202259864,
      "contentHash": "5b21a9bb4a9263e1341590d5e42a677c",
      "sourceName": "contracts/fee/FundFeeStore.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/lib/FundingRateCalculator.sol",
        "contracts/utils/Calc.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "FundFeeStore": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "FundFeeStore.sol/FundFeeStore.json"
        }
      }
    },
    "contracts/fee/interfaces/IFeeRouter.sol": {
      "lastModificationDate": 1698202259864,
      "contentHash": "e1bac296ec61150c6464e12638b3c4e9",
      "sourceName": "contracts/fee/interfaces/IFeeRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IFeeRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "interfaces/IFeeRouter.sol/IFeeRouter.json"
        }
      }
    },
    "contracts/fee/interfaces/IFeeVault.sol": {
      "lastModificationDate": 1694402779313,
      "contentHash": "44cfe26730bc3f4fcb291d00323c00fd",
      "sourceName": "contracts/fee/interfaces/IFeeVault.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IFeeVault": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IFeeVault.sol/IFeeVault.json"
        }
      }
    },
    "contracts/fee/interfaces/IFundFee.sol": {
      "lastModificationDate": 1698202259864,
      "contentHash": "6ed9ec02b88111f70ffb192976f95f08",
      "sourceName": "contracts/fee/interfaces/IFundFee.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IFundFee": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IFundFee.sol/IFundFee.json"
        }
      }
    },
    "contracts/fee/lib/FeeRouterLib.sol": {
      "lastModificationDate": 1698202259864,
      "contentHash": "10d37cc277cf45fe6b31eff00b283ce4",
      "sourceName": "contracts/fee/lib/FeeRouterLib.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/TransferHelper.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "FeeRouterLib": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "FeeRouterLib.sol/FeeRouterLib.json"
        }
      }
    },
    "contracts/fee/lib/FundingRateCalculator.sol": {
      "lastModificationDate": 1698202259864,
      "contentHash": "7ec7e156246265363bd0fd6c0ee38e70",
      "sourceName": "contracts/fee/lib/FundingRateCalculator.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/utils/Calc.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "FundingRateCalculator": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "FundingRateCalculator.sol/FundingRateCalculator.json"
        }
      }
    },
    "contracts/market/GlobalValid.sol": {
      "lastModificationDate": 1698202259864,
      "contentHash": "106f95e411da37cdce52a033362b4577",
      "sourceName": "contracts/market/GlobalValid.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/market/interfaces/IGlobalValid.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "GlobalValid": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "GlobalValid.sol/GlobalValid.json"
        }
      }
    },
    "contracts/market/Market.sol": {
      "lastModificationDate": 1698202259865,
      "contentHash": "b5e1b8b5d553f8dfa06fe67a3c4e28ca",
      "sourceName": "contracts/market/Market.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/MarketStorage.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketRouter.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/position/interfaces/IPositionStore.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Market": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Market.sol/Market.json"
        }
      }
    },
    "contracts/market/MarketConfigStruct.sol": {
      "lastModificationDate": 1698202259865,
      "contentHash": "fb07d2f46c09ba9609278e288fbf8c76",
      "sourceName": "contracts/market/MarketConfigStruct.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketConfigStruct": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketConfigStruct.sol/MarketConfigStruct.json"
        }
      }
    },
    "contracts/market/MarketDataTypes.sol": {
      "lastModificationDate": 1698202259865,
      "contentHash": "4e4af660a148e4b6c39caca9af2d25e4",
      "sourceName": "contracts/market/MarketDataTypes.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketDataTypes": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketDataTypes.sol/MarketDataTypes.json"
        }
      }
    },
    "contracts/market/MarketFactory.sol": {
      "lastModificationDate": 1698202259865,
      "contentHash": "1750fe727ec41c5166bc217e1c966c9e",
      "sourceName": "contracts/market/MarketFactory.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/market/interfaces/IMarketRouter.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketFactory": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketFactory.sol/MarketFactory.json"
        }
      }
    },
    "contracts/market/MarketLib.sol": {
      "lastModificationDate": 1694671158885,
      "contentHash": "6a29f230a009a2b305be2425579eae8c",
      "sourceName": "contracts/market/MarketLib.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketLib": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketLib.sol/MarketLib.json"
        }
      }
    },
    "contracts/market/MarketReader.sol": {
      "lastModificationDate": 1698202259866,
      "contentHash": "22945efea7f4f91e0c7be07c2f9a3c1b",
      "sourceName": "contracts/market/MarketReader.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/interfaces/IGlobalValid.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/market/interfaces/IMarketReader.sol",
        "contracts/market/interfaces/IMarketRouter.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketReader": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketReader.sol/MarketReader.json"
        }
      }
    },
    "contracts/market/MarketRouter.sol": {
      "lastModificationDate": 1698202259866,
      "contentHash": "bf4d1bdd8a55abd42393935c9261796f",
      "sourceName": "contracts/market/MarketRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/interfaces/IGlobalValid.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/EnumerableValues.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketRouter.sol/MarketRouter.json"
        }
      }
    },
    "contracts/market/MarketStorage.sol": {
      "lastModificationDate": 1698202259866,
      "contentHash": "3db14aa70cdc20ce9f7f3b2a8e928edf",
      "sourceName": "contracts/market/MarketStorage.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/position/interfaces/IPositionStore.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketStorage": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketStorage.sol/MarketStorage.json"
        }
      }
    },
    "contracts/market/MarketValid.sol": {
      "lastModificationDate": 1698202259867,
      "contentHash": "eb98cb7118423146df934f6e75ebae49",
      "sourceName": "contracts/market/MarketValid.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketValid": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketValid.sol/MarketValid.json"
        }
      }
    },
    "contracts/market/OrderMgr.sol": {
      "lastModificationDate": 1698202259867,
      "contentHash": "55157f1f5c052f882b200b9cf8815a0d",
      "sourceName": "contracts/market/OrderMgr.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/MarketStorage.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/position/interfaces/IPositionStore.sol",
        "contracts/referral/interfaces/IReferral.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/Strings.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "OrderMgr": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "OrderMgr.sol/OrderMgr.json"
        }
      }
    },
    "contracts/market/PositionAddMgr.sol": {
      "lastModificationDate": 1698202259867,
      "contentHash": "96b8aa748246008d1e8a8bc817b02ddc",
      "sourceName": "contracts/market/PositionAddMgr.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/MarketStorage.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketRouter.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/position/interfaces/IPositionStore.sol",
        "contracts/referral/interfaces/IReferral.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/Strings.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "PositionAddMgr": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "PositionAddMgr.sol/PositionAddMgr.json"
        }
      }
    },
    "contracts/market/PositionSubMgr.sol": {
      "lastModificationDate": 1698202259867,
      "contentHash": "d865b8d9bcb6fe610d83597d9f6d8ad2",
      "sourceName": "contracts/market/PositionSubMgr.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/MarketStorage.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/market/lib/PostionSubMgrLib.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/position/interfaces/IPositionStore.sol",
        "contracts/referral/interfaces/IReferral.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "PositionSubMgr": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "PositionSubMgr.sol/PositionSubMgr.json"
        }
      }
    },
    "contracts/market/interfaces/IGlobalValid.sol": {
      "lastModificationDate": 1694677584557,
      "contentHash": "a0818b6ebc2ea0e4125a67b4a8ef5e6f",
      "sourceName": "contracts/market/interfaces/IGlobalValid.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IGlobalValid": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IGlobalValid.sol/IGlobalValid.json"
        }
      }
    },
    "contracts/market/interfaces/IMarket.sol": {
      "lastModificationDate": 1698202259867,
      "contentHash": "84b05d210246193da26260d9b3b3f847",
      "sourceName": "contracts/market/interfaces/IMarket.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IMarket": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarket.sol/IMarket.json"
        },
        "IMarketStorage": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarket.sol/IMarketStorage.json"
        },
        "MarketAddressIndex": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarket.sol/MarketAddressIndex.json"
        }
      }
    },
    "contracts/market/interfaces/IMarketCallBackIntl.sol": {
      "lastModificationDate": 1694402779316,
      "contentHash": "081586eb5c0440cd9f35b8c5214d6e05",
      "sourceName": "contracts/market/interfaces/IMarketCallBackIntl.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketCallBackIntl": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarketCallBackIntl.sol/MarketCallBackIntl.json"
        },
        "MarketOrderCallBackIntl": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarketCallBackIntl.sol/MarketOrderCallBackIntl.json"
        },
        "MarketPositionCallBackIntl": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarketCallBackIntl.sol/MarketPositionCallBackIntl.json"
        }
      }
    },
    "contracts/market/interfaces/IMarketFactory.sol": {
      "lastModificationDate": 1694677584557,
      "contentHash": "65c438edb3549137ca09b8a7da92f753",
      "sourceName": "contracts/market/interfaces/IMarketFactory.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IMarketFactory": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarketFactory.sol/IMarketFactory.json"
        }
      }
    },
    "contracts/market/interfaces/IMarketReader.sol": {
      "lastModificationDate": 1698202259867,
      "contentHash": "b79db59c1cbc4e97750a423b155f448f",
      "sourceName": "contracts/market/interfaces/IMarketReader.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IMarketReader": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarketReader.sol/IMarketReader.json"
        }
      }
    },
    "contracts/market/interfaces/IMarketRouter.sol": {
      "lastModificationDate": 1694402779317,
      "contentHash": "65709bfc4c1ea73b69bb487492ab6f5d",
      "sourceName": "contracts/market/interfaces/IMarketRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IMarketRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarketRouter.sol/IMarketRouter.json"
        }
      }
    },
    "contracts/market/interfaces/IMarketValid.sol": {
      "lastModificationDate": 1694402779317,
      "contentHash": "d7e7ee72657839f0787e8722e741a710",
      "sourceName": "contracts/market/interfaces/IMarketValid.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IMarketValid": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarketValid.sol/IMarketValid.json"
        },
        "IMarketValidFuncs": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMarketValid.sol/IMarketValidFuncs.json"
        }
      }
    },
    "contracts/market/lib/PostionSubMgrLib.sol": {
      "lastModificationDate": 1698202259868,
      "contentHash": "9548d307c0e6dad649d782e3a9db8ea9",
      "sourceName": "contracts/market/lib/PostionSubMgrLib.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/TransferHelper.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "PositionSubMgrLib": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "PostionSubMgrLib.sol/PositionSubMgrLib.json"
        }
      }
    },
    "contracts/mocker/ERC20Mocker.sol": {
      "lastModificationDate": 1694402779318,
      "contentHash": "ea59a7e14e9e37d288842103b6a934cc",
      "sourceName": "contracts/mocker/ERC20Mocker.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ERC20Mocker": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ERC20Mocker.sol/ERC20Mocker.json"
        }
      }
    },
    "contracts/mocker/IPositionMarket.sol": {
      "lastModificationDate": 1694402779318,
      "contentHash": "684440f9114cdd00bc0f6f2277d636d6",
      "sourceName": "contracts/mocker/IPositionMarket.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/position/PositionStruct.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IPositionMarket": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IPositionMarket.sol/IPositionMarket.json"
        }
      }
    },
    "contracts/mocker/MarketValidReader.sol": {
      "lastModificationDate": 1694402779318,
      "contentHash": "bfcb75dc66dccdd7d88758538c81cdb6",
      "sourceName": "contracts/mocker/MarketValidReader.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MarketValidReader": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MarketValidReader.sol/MarketValidReader.json"
        }
      }
    },
    "contracts/mocker/MockChainLinkPrice.sol": {
      "lastModificationDate": 1694402779318,
      "contentHash": "d37c4fea92cde7375136a7f425b75a92",
      "sourceName": "contracts/mocker/MockChainLinkPrice.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/oracle/interfaces/IPriceFeed.sol",
        "node_modules/hardhat/console.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockChainLinkPrice": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockChainLinkPrice.sol/MockChainLinkPrice.json"
        }
      }
    },
    "contracts/mocker/MockChainPriceFeed.sol": {
      "lastModificationDate": 1694402779318,
      "contentHash": "074b483079fc4d9bf3258a04ad5f707e",
      "sourceName": "contracts/mocker/MockChainPriceFeed.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/oracle/interfaces/IFastPriceFeed.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ChainPriceFeedMock": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockChainPriceFeed.sol/ChainPriceFeedMock.json"
        }
      }
    },
    "contracts/mocker/MockEvent.sol": {
      "lastModificationDate": 1694402779318,
      "contentHash": "6ac191026b229a7cae0a554b23e2d07a",
      "sourceName": "contracts/mocker/MockEvent.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockEvent": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockEvent.sol/MockEvent.json"
        }
      }
    },
    "contracts/mocker/MockFeeRouter.sol": {
      "lastModificationDate": 1694402779318,
      "contentHash": "ff2de749447258e37d3c133afc2801b3",
      "sourceName": "contracts/mocker/MockFeeRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockFeeRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockFeeRouter.sol/MockFeeRouter.json"
        }
      }
    },
    "contracts/mocker/MockFeeStore.sol": {
      "lastModificationDate": 1694402779318,
      "contentHash": "9033833b0545871fcd9c56ee3e7ae179",
      "sourceName": "contracts/mocker/MockFeeStore.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockFeeStore": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockFeeStore.sol/MockFeeStore.json"
        }
      }
    },
    "contracts/mocker/MockGloalVaild.sol": {
      "lastModificationDate": 1694677584557,
      "contentHash": "640917316bf4141ca0f6c7df0d42dd0e",
      "sourceName": "contracts/mocker/MockGloalVaild.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/interfaces/IGlobalValid.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockGlobalValid": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockGloalVaild.sol/MockGlobalValid.json"
        }
      }
    },
    "contracts/mocker/MockGmxPriceFeed.sol": {
      "lastModificationDate": 1694402779319,
      "contentHash": "5bebee591127145aef42b9f3ebe0960c",
      "sourceName": "contracts/mocker/MockGmxPriceFeed.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/oracle/interfaces/IFastPriceFeed.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ChainPriceFeedMock": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockGmxPriceFeed.sol/ChainPriceFeedMock.json"
        }
      }
    },
    "contracts/mocker/MockMarket.sol": {
      "lastModificationDate": 1694402779319,
      "contentHash": "1a7ad3924163b6269f0ee17ccf23d699",
      "sourceName": "contracts/mocker/MockMarket.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketRouter.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockMarket": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockMarket.sol/MockMarket.json"
        }
      }
    },
    "contracts/mocker/MockMarketFactory.sol": {
      "lastModificationDate": 1694677584557,
      "contentHash": "ef1874f492626e4debfd150d1521405b",
      "sourceName": "contracts/mocker/MockMarketFactory.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockMarketFactory": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockMarketFactory.sol/MockMarketFactory.json"
        }
      }
    },
    "contracts/mocker/MockMarketRouter.sol": {
      "lastModificationDate": 1694402779319,
      "contentHash": "d547a87c49370715d4687aa9b16c39ee",
      "sourceName": "contracts/mocker/MockMarketRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockMarketRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockMarketRouter.sol/MockMarketRouter.json"
        }
      }
    },
    "contracts/mocker/MockMarketVaild.sol": {
      "lastModificationDate": 1694402779319,
      "contentHash": "6e026d1675b70f02971b466270bf48a9",
      "sourceName": "contracts/mocker/MockMarketVaild.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/TransferHelper.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockMarketVaild": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockMarketVaild.sol/MockMarketVaild.json"
        }
      }
    },
    "contracts/mocker/MockMarketVaildSub.sol": {
      "lastModificationDate": 1694402779319,
      "contentHash": "54add804302e3bea1027a38dc7179ff6",
      "sourceName": "contracts/mocker/MockMarketVaildSub.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockMarketVaildSub": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockMarketVaildSub.sol/MockMarketVaildSub.json"
        }
      }
    },
    "contracts/mocker/MockOracle.sol": {
      "lastModificationDate": 1694402779319,
      "contentHash": "722588d6dc857453b34515e4b7b23971",
      "sourceName": "contracts/mocker/MockOracle.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockOracle": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockOracle.sol/MockOracle.json"
        }
      }
    },
    "contracts/mocker/MockOrderBook.sol": {
      "lastModificationDate": 1694402779319,
      "contentHash": "151a6ae3dd5209cac38fe4ea1eab0f8c",
      "sourceName": "contracts/mocker/MockOrderBook.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderBook.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStore.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/EnumerableValues.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockOrderBook": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockOrderBook.sol/MockOrderBook.json"
        }
      }
    },
    "contracts/mocker/MockOrderMgr.sol": {
      "lastModificationDate": 1698202259868,
      "contentHash": "cc72babb33227a4c1ccb0f2e78d49b6e",
      "sourceName": "contracts/mocker/MockOrderMgr.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/MarketStorage.sol",
        "contracts/market/OrderMgr.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/position/interfaces/IPositionStore.sol",
        "contracts/referral/interfaces/IReferral.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/Strings.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockOrderMgr": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockOrderMgr.sol/MockOrderMgr.json"
        }
      }
    },
    "contracts/mocker/MockOrderStore.sol": {
      "lastModificationDate": 1694402779319,
      "contentHash": "9cd75f66afe5007b3f88fbdecf4b30f4",
      "sourceName": "contracts/mocker/MockOrderStore.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockOrderStore": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockOrderStore.sol/MockOrderStore.json"
        }
      }
    },
    "contracts/mocker/MockPositionAddMgr.sol": {
      "lastModificationDate": 1698202259868,
      "contentHash": "222a1b26464fe970fae20a545c3990e3",
      "sourceName": "contracts/mocker/MockPositionAddMgr.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/MarketStorage.sol",
        "contracts/market/PositionAddMgr.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketRouter.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/position/interfaces/IPositionStore.sol",
        "contracts/referral/interfaces/IReferral.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/Strings.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockPositionAddMgr": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockPositionAddMgr.sol/MockPositionAddMgr.json"
        }
      }
    },
    "contracts/mocker/MockPositionBook.sol": {
      "lastModificationDate": 1694402779320,
      "contentHash": "d238f54502271d50652ba2b9ef0f1da5",
      "sourceName": "contracts/mocker/MockPositionBook.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/mocker/IPositionMarket.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/EnumerableValues.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
        "node_modules/hardhat/console.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "PositionBookMocker": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockPositionBook.sol/PositionBookMocker.json"
        }
      }
    },
    "contracts/mocker/MockPositionMarket.sol": {
      "lastModificationDate": 1694402779320,
      "contentHash": "d40c01188275d691e593b7fe043847aa",
      "sourceName": "contracts/mocker/MockPositionMarket.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/position/PositionStruct.sol",
        "contracts/utils/EnumerableValues.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockPositionMarket": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockPositionMarket.sol/MockPositionMarket.json"
        }
      }
    },
    "contracts/mocker/MockPositionSubMgr.sol": {
      "lastModificationDate": 1698202259868,
      "contentHash": "be50b3d9ee610b97a889f1b6ec368889",
      "sourceName": "contracts/mocker/MockPositionSubMgr.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/market/MarketConfigStruct.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/MarketLib.sol",
        "contracts/market/MarketStorage.sol",
        "contracts/market/PositionSubMgr.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/market/lib/PostionSubMgrLib.sol",
        "contracts/oracle/interfaces/IPrice.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/position/interfaces/IPositionStore.sol",
        "contracts/referral/interfaces/IReferral.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockPositionSubMgr": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockPositionSubMgr.sol/MockPositionSubMgr.json"
        }
      }
    },
    "contracts/mocker/MockRewardDistributor.sol": {
      "lastModificationDate": 1698202259868,
      "contentHash": "8a5919b8db0b501557066dbad49e00f1",
      "sourceName": "contracts/mocker/MockRewardDistributor.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.9",
      "artifacts": {
        "MockRewardDistributor": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockRewardDistributor.sol/MockRewardDistributor.json"
        }
      }
    },
    "contracts/mocker/MockVaultRewardForCoreVault.sol": {
      "lastModificationDate": 1698202259869,
      "contentHash": "4e01a9c8b49b60d4b198c883efd25144",
      "sourceName": "contracts/mocker/MockVaultRewardForCoreVault.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.9",
      "artifacts": {
        "MockVaultRewardForCoreVault": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockVaultRewardForCoreVault.sol/MockVaultRewardForCoreVault.json"
        }
      }
    },
    "contracts/mocker/MockVaultRouter.sol": {
      "lastModificationDate": 1698202259869,
      "contentHash": "d0bc2ec2cfe33f01b8f8637a362cf2fd",
      "sourceName": "contracts/mocker/MockVaultRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockVaultRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MockVaultRouter.sol/MockVaultRouter.json"
        }
      }
    },
    "contracts/mocker/PositionBookMock.sol": {
      "lastModificationDate": 1694402779320,
      "contentHash": "513e722f3e33f8e807836923c6613c97",
      "sourceName": "contracts/mocker/PositionBookMock.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "PositionBookMock": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "PositionBookMock.sol/PositionBookMock.json"
        }
      }
    },
    "contracts/mocker/USDC.sol": {
      "lastModificationDate": 1694402779320,
      "contentHash": "4279c101b316f3ed86e74c684aa58ae6",
      "sourceName": "contracts/mocker/USDC.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Counters.sol",
        "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.9",
      "artifacts": {
        "USDC": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "USDC.sol/USDC.json"
        }
      }
    },
    "contracts/mocker/interfaces/IFeeRouter.sol": {
      "lastModificationDate": 1698202259869,
      "contentHash": "a6c279dbc4caab160b5df6631547bba1",
      "sourceName": "contracts/mocker/interfaces/IFeeRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IFeeRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "mocker/interfaces/IFeeRouter.sol/IFeeRouter.json"
        }
      }
    },
    "contracts/mocker/interfaces/IKeeperRegistry.sol": {
      "lastModificationDate": 1694402779320,
      "contentHash": "193501426e7d608053256592268d2d31",
      "sourceName": "contracts/mocker/interfaces/IKeeperRegistry.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IKeeperRegistry": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "mocker/interfaces/IKeeperRegistry.sol/IKeeperRegistry.json"
        },
        "KeeperRegistryBaseInterface": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "mocker/interfaces/IKeeperRegistry.sol/KeeperRegistryBaseInterface.json"
        }
      }
    },
    "contracts/mocker/interfaces/ILinkToken.sol": {
      "lastModificationDate": 1694402779320,
      "contentHash": "649d108c5d1aed7a1a56f71ac7fb6e8d",
      "sourceName": "contracts/mocker/interfaces/ILinkToken.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ILinkToken": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "mocker/interfaces/ILinkToken.sol/ILinkToken.json"
        }
      }
    },
    "contracts/openzeppelin/ERC20.sol": {
      "lastModificationDate": 1694402779321,
      "contentHash": "382432326c36b1d26e73f240f7ba4bdf",
      "sourceName": "contracts/openzeppelin/ERC20.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC20": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "openzeppelin/ERC20.sol/ERC20.json"
        }
      }
    },
    "contracts/openzeppelin/ERC4626.sol": {
      "lastModificationDate": 1694402779321,
      "contentHash": "bc1f98c74f236752c4dcbeeba44b15d6",
      "sourceName": "contracts/openzeppelin/ERC4626.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/openzeppelin/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC4626": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "openzeppelin/ERC4626.sol/ERC4626.json"
        }
      }
    },
    "contracts/openzeppelin/ERC721.sol": {
      "lastModificationDate": 1694402779321,
      "contentHash": "9e09a2345e63da84aed3efd2a6a48ee7",
      "sourceName": "contracts/openzeppelin/ERC721.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ERC721": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ERC721.sol/ERC721.json"
        }
      }
    },
    "contracts/oracle/ChainPriceFeed.sol": {
      "lastModificationDate": 1698203780338,
      "contentHash": "0da85af7d5d7f8ba44c90f8a0e37e014",
      "sourceName": "contracts/oracle/ChainPriceFeed.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/oracle/interfaces/IPriceFeed.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ChainPriceFeed": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ChainPriceFeed.sol/ChainPriceFeed.json"
        }
      }
    },
    "contracts/oracle/FastPriceFeed.sol": {
      "lastModificationDate": 1698202259870,
      "contentHash": "961a39cecd2a0ceeba3e9f0fce58d749",
      "sourceName": "contracts/oracle/FastPriceFeed.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/oracle/interfaces/IChainPriceFeed.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "FastPriceFeed": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "FastPriceFeed.sol/FastPriceFeed.json"
        }
      }
    },
    "contracts/oracle/Price.sol": {
      "lastModificationDate": 1698202259870,
      "contentHash": "e098769313d007aafa55c039b545acd7",
      "sourceName": "contracts/oracle/Price.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/oracle/interfaces/IChainPriceFeed.sol",
        "contracts/oracle/interfaces/IFastPriceFeed.sol",
        "contracts/oracle/interfaces/IGmxPriceFeed.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Price": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Price.sol/Price.json"
        }
      }
    },
    "contracts/oracle/interfaces/IChainPriceFeed.sol": {
      "lastModificationDate": 1694402779321,
      "contentHash": "4fe98a24ec491f073ed4eeb3ddc161d9",
      "sourceName": "contracts/oracle/interfaces/IChainPriceFeed.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IChainPriceFeed": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IChainPriceFeed.sol/IChainPriceFeed.json"
        }
      }
    },
    "contracts/oracle/interfaces/IFastPriceFeed.sol": {
      "lastModificationDate": 1694402779322,
      "contentHash": "fdc4d33959a0e22286a1c6c88aa53d04",
      "sourceName": "contracts/oracle/interfaces/IFastPriceFeed.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IFastPriceFeed": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IFastPriceFeed.sol/IFastPriceFeed.json"
        }
      }
    },
    "contracts/oracle/interfaces/IGmxPriceFeed.sol": {
      "lastModificationDate": 1694402779322,
      "contentHash": "2499199f902900245facd026e68f2ee7",
      "sourceName": "contracts/oracle/interfaces/IGmxPriceFeed.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IGmxPriceFeed": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IGmxPriceFeed.sol/IGmxPriceFeed.json"
        }
      }
    },
    "contracts/oracle/interfaces/IPrice.sol": {
      "lastModificationDate": 1694402779322,
      "contentHash": "9c3d36ced884f911a83038b2597c7c8d",
      "sourceName": "contracts/oracle/interfaces/IPrice.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IPrice": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IPrice.sol/IPrice.json"
        }
      }
    },
    "contracts/oracle/interfaces/IPriceFeed.sol": {
      "lastModificationDate": 1694677584557,
      "contentHash": "788594d33b500cf32dc971a97040744a",
      "sourceName": "contracts/oracle/interfaces/IPriceFeed.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IPriceFeed": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IPriceFeed.sol/IPriceFeed.json"
        }
      }
    },
    "contracts/order/OrderBook.sol": {
      "lastModificationDate": 1698202259870,
      "contentHash": "1e9fdac9e125d9ef7f2440373e3f4586",
      "sourceName": "contracts/order/OrderBook.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "OrderBook": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "OrderBook.sol/OrderBook.json"
        }
      }
    },
    "contracts/order/OrderLib.sol": {
      "lastModificationDate": 1694677584558,
      "contentHash": "0044b8253dea37180381d9028d506bf7",
      "sourceName": "contracts/order/OrderLib.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "OrderLib": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "OrderLib.sol/OrderLib.json"
        }
      }
    },
    "contracts/order/OrderStore.sol": {
      "lastModificationDate": 1698202259870,
      "contentHash": "293bc31ae6e587205f6283125a54479b",
      "sourceName": "contracts/order/OrderStore.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/utils/EnumerableValues.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "OrderStore": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "OrderStore.sol/OrderStore.json"
        }
      }
    },
    "contracts/order/OrderStruct.sol": {
      "lastModificationDate": 1698202259870,
      "contentHash": "024816a51765ddd0bb09c1b1d8c559e5",
      "sourceName": "contracts/order/OrderStruct.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/order/OrderLib.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Order": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "OrderStruct.sol/Order.json"
        }
      }
    },
    "contracts/order/interface/IOrderBook.sol": {
      "lastModificationDate": 1694675788579,
      "contentHash": "b0f892dc1f88ca9412039a9f987b0db9",
      "sourceName": "contracts/order/interface/IOrderBook.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IOrderBook": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IOrderBook.sol/IOrderBook.json"
        }
      }
    },
    "contracts/order/interface/IOrderStore.sol": {
      "lastModificationDate": 1694402779323,
      "contentHash": "af7218e0b5fcc78ff49799530adb21bd",
      "sourceName": "contracts/order/interface/IOrderStore.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IOrderStore": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IOrderStore.sol/IOrderStore.json"
        }
      }
    },
    "contracts/position/PositionBook.sol": {
      "lastModificationDate": 1698202259870,
      "contentHash": "f7929c836d5193fcddfb2de4d7aee072",
      "sourceName": "contracts/position/PositionBook.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/position/PositionStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/utils/EnumerableValues.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "PositionBook": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "PositionBook.sol/PositionBook.json"
        }
      }
    },
    "contracts/position/PositionStore.sol": {
      "lastModificationDate": 1694677584558,
      "contentHash": "dbb181eb98e22d0f1270b360e34d6570",
      "sourceName": "contracts/position/PositionStore.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/utils/EnumerableValues.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "PositionStore": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "PositionStore.sol/PositionStore.json"
        }
      }
    },
    "contracts/position/PositionStruct.sol": {
      "lastModificationDate": 1694677584558,
      "contentHash": "d1abb06780e33f8c984a96c14d9e0002",
      "sourceName": "contracts/position/PositionStruct.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Position": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "PositionStruct.sol/Position.json"
        }
      }
    },
    "contracts/position/interfaces/IPositionBook.sol": {
      "lastModificationDate": 1694402779323,
      "contentHash": "ee54c0f6c14a91e5b8d5d4d5d7801008",
      "sourceName": "contracts/position/interfaces/IPositionBook.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/position/PositionStruct.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IPositionBook": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IPositionBook.sol/IPositionBook.json"
        }
      }
    },
    "contracts/position/interfaces/IPositionStore.sol": {
      "lastModificationDate": 1694402779323,
      "contentHash": "37c41e3e0ff5fe1fef0e82d0c70d9e11",
      "sourceName": "contracts/position/interfaces/IPositionStore.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/position/PositionStruct.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IPositionStore": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IPositionStore.sol/IPositionStore.json"
        }
      }
    },
    "contracts/referral/Referral.sol": {
      "lastModificationDate": 1698202259871,
      "contentHash": "36485a23ad571a6cf44f8ebc73863b03",
      "sourceName": "contracts/referral/Referral.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/referral/interfaces/IReferral.sol",
        "contracts/utils/TransferHelper.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IRewardDistributor": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Referral.sol/IRewardDistributor.json"
        },
        "Referral": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Referral.sol/Referral.json"
        }
      }
    },
    "contracts/referral/interfaces/IReferral.sol": {
      "lastModificationDate": 1694402779323,
      "contentHash": "d0f4b2b22217907c2a2892112b31a109",
      "sourceName": "contracts/referral/interfaces/IReferral.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IReferral": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IReferral.sol/IReferral.json"
        }
      }
    },
    "contracts/stake/BLERewardTracker.sol": {
      "lastModificationDate": 1694402779324,
      "contentHash": "2e486263bf6ad0b3fd8cdee6f93e82c5",
      "sourceName": "contracts/stake/BLERewardTracker.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/openzeppelin/ERC20.sol",
        "contracts/stake/VaultRewardBase.sol",
        "contracts/stake/interfaces/IMintable.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/IRewardDistributor.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "BLERewardTracker": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BLERewardTracker.sol/BLERewardTracker.json"
        }
      }
    },
    "contracts/stake/BLERouter.sol": {
      "lastModificationDate": 1694402779324,
      "contentHash": "35b9f900fe158a6b3b3563b2fd446b82",
      "sourceName": "contracts/stake/BLERouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "BLERouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BLERouter.sol/BLERouter.json"
        },
        "IBLERewardTracker": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BLERouter.sol/IBLERewardTracker.json"
        }
      }
    },
    "contracts/stake/BNFT.sol": {
      "lastModificationDate": 1694677584558,
      "contentHash": "3c241c97a5dad9eb4dcfeaffb0a7ad15",
      "sourceName": "contracts/stake/BNFT.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/openzeppelin/ERC721.sol",
        "contracts/stake/VaultRewardBase.sol",
        "contracts/stake/interfaces/IMintable.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultReward.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "BNFT": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BNFT.sol/BNFT.json"
        }
      }
    },
    "contracts/stake/Booster.sol": {
      "lastModificationDate": 1694677584559,
      "contentHash": "56b4c8c81409dfb3c886816c0e7b25b9",
      "sourceName": "contracts/stake/Booster.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/token/interfaces/IMintable.sol",
        "contracts/utils/TransferHelper.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Booster": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Booster.sol/Booster.json"
        }
      }
    },
    "contracts/stake/EsBLETradeRewarder.sol": {
      "lastModificationDate": 1694677584559,
      "contentHash": "353a16f85dac85f3485ff0a03d445b1e",
      "sourceName": "contracts/stake/EsBLETradeRewarder.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/stake/TradeVolume.sol",
        "contracts/stake/interfaces/IMintable.sol",
        "contracts/stake/interfaces/ITradePlugin.sol",
        "contracts/stake/interfaces/ITradeVolume.sol",
        "contracts/utils/TransferHelper.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "EsBLETradeRewarder": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "EsBLETradeRewarder.sol/EsBLETradeRewarder.json"
        }
      }
    },
    "contracts/stake/RewardRouter.sol": {
      "lastModificationDate": 1694402779324,
      "contentHash": "66906ccd54bd760c0a79ed833f556bf9",
      "sourceName": "contracts/stake/RewardRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/stake/interfaces/IBLERouter.sol",
        "contracts/stake/interfaces/IBNFT.sol",
        "contracts/stake/interfaces/IVester.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IBooster": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "RewardRouter.sol/IBooster.json"
        },
        "IRewardTracker": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "RewardRouter.sol/IRewardTracker.json"
        },
        "RewardRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "RewardRouter.sol/RewardRouter.json"
        }
      }
    },
    "contracts/stake/TradeVolume.sol": {
      "lastModificationDate": 1694402779324,
      "contentHash": "217423fb6f4f0b3d587b7b20ad98b954",
      "sourceName": "contracts/stake/TradeVolume.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/stake/TradeVolume.sol",
        "contracts/stake/interfaces/ITradePlugin.sol",
        "contracts/stake/interfaces/ITradeVolume.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "TradeVolume": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "TradeVolume.sol/TradeVolume.json"
        }
      }
    },
    "contracts/stake/VaultRewardBase.sol": {
      "lastModificationDate": 1694402779324,
      "contentHash": "bc88a63838a9ed6e594b1220565279a1",
      "sourceName": "contracts/stake/VaultRewardBase.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/utils/TransferHelper.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.9",
      "artifacts": {
        "VaultRewardBase": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "VaultRewardBase.sol/VaultRewardBase.json"
        }
      }
    },
    "contracts/stake/Vester.sol": {
      "lastModificationDate": 1694402779324,
      "contentHash": "b86af6e9f49e62478b5bc3c5ab18e3ef",
      "sourceName": "contracts/stake/Vester.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/stake/interfaces/IMintable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Vester": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Vester.sol/Vester.json"
        }
      }
    },
    "contracts/stake/interfaces/IBLERouter.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "d4c967b8dec910b9768c502f627cab53",
      "sourceName": "contracts/stake/interfaces/IBLERouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IBLERouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IBLERouter.sol/IBLERouter.json"
        }
      }
    },
    "contracts/stake/interfaces/IBNFT.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "a7f667355f4117a0cab3b156bc254bc1",
      "sourceName": "contracts/stake/interfaces/IBNFT.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IBNFT": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IBNFT.sol/IBNFT.json"
        }
      }
    },
    "contracts/stake/interfaces/IMintable.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "70bb30bc06e44993b62652581bc6719f",
      "sourceName": "contracts/stake/interfaces/IMintable.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IMintable": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "interfaces/IMintable.sol/IMintable.json"
        }
      }
    },
    "contracts/stake/interfaces/IRewardTracker.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "11b104714970c32855861575c6305b48",
      "sourceName": "contracts/stake/interfaces/IRewardTracker.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IRewardTracker": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IRewardTracker.sol/IRewardTracker.json"
        }
      }
    },
    "contracts/stake/interfaces/ITradePlugin.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "6c3ad58e4755ac63283c97f1ff542444",
      "sourceName": "contracts/stake/interfaces/ITradePlugin.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/stake/TradeVolume.sol",
        "contracts/stake/interfaces/ITradePlugin.sol",
        "contracts/stake/interfaces/ITradeVolume.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ITradePlugin": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ITradePlugin.sol/ITradePlugin.json"
        }
      }
    },
    "contracts/stake/interfaces/ITradeVolume.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "8268632c238741697f480ba9c59bef52",
      "sourceName": "contracts/stake/interfaces/ITradeVolume.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/stake/TradeVolume.sol",
        "contracts/stake/interfaces/ITradePlugin.sol",
        "contracts/stake/interfaces/ITradeVolume.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ITradeVolume": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ITradeVolume.sol/ITradeVolume.json"
        }
      }
    },
    "contracts/stake/interfaces/IVester.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "7210bbbe45cc365bae563b390bb8b733",
      "sourceName": "contracts/stake/interfaces/IVester.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IVester": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IVester.sol/IVester.json"
        }
      }
    },
    "contracts/token/BLE.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "20412479c4e115f7d80f391fa75f0e32",
      "sourceName": "contracts/token/BLE.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/token/BaseToken.sol",
        "contracts/token/MintableBaseToken.sol",
        "contracts/token/interfaces/IMintable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "BLE": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BLE.sol/BLE.json"
        }
      }
    },
    "contracts/token/BPT.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "71fdc813f69b55e1488960a2ac349c9b",
      "sourceName": "contracts/token/BPT.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/token/BaseToken.sol",
        "contracts/token/MintableBaseToken.sol",
        "contracts/token/interfaces/IMintable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "BPT": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BPT.sol/BPT.json"
        }
      }
    },
    "contracts/token/BaseToken.sol": {
      "lastModificationDate": 1694677584559,
      "contentHash": "c20cc9ac9bcc8c9d9710522860800278",
      "sourceName": "contracts/token/BaseToken.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "BaseToken": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BaseToken.sol/BaseToken.json"
        },
        "IYieldTracker": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BaseToken.sol/IYieldTracker.json"
        }
      }
    },
    "contracts/token/EsBLE.sol": {
      "lastModificationDate": 1694402779325,
      "contentHash": "54370e0068d0da380cfca893a8730dc1",
      "sourceName": "contracts/token/EsBLE.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/token/BaseToken.sol",
        "contracts/token/MintableBaseToken.sol",
        "contracts/token/interfaces/IMintable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "EsBLE": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "EsBLE.sol/EsBLE.json"
        }
      }
    },
    "contracts/token/MintableBaseToken.sol": {
      "lastModificationDate": 1694677584559,
      "contentHash": "6567a2e0996bc5ef4a1b34efc95ff807",
      "sourceName": "contracts/token/MintableBaseToken.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/token/BaseToken.sol",
        "contracts/token/interfaces/IMintable.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MintableBaseToken": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "MintableBaseToken.sol/MintableBaseToken.json"
        }
      }
    },
    "contracts/token/interfaces/IMintable.sol": {
      "lastModificationDate": 1694402779326,
      "contentHash": "70bb30bc06e44993b62652581bc6719f",
      "sourceName": "contracts/token/interfaces/IMintable.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IMintable": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "token/interfaces/IMintable.sol/IMintable.json"
        }
      }
    },
    "contracts/utils/Calc.sol": {
      "lastModificationDate": 1698202259871,
      "contentHash": "a040f1589e102670c07c72a8beff017b",
      "sourceName": "contracts/utils/Calc.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Calc": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Calc.sol/Calc.json"
        }
      }
    },
    "contracts/utils/EnumerableValues.sol": {
      "lastModificationDate": 1694402779326,
      "contentHash": "e49fe82a18dbbc3111f670572a7d22d6",
      "sourceName": "contracts/utils/EnumerableValues.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "EnumerableValues": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "EnumerableValues.sol/EnumerableValues.json"
        }
      }
    },
    "contracts/utils/Strings.sol": {
      "lastModificationDate": 1694402779326,
      "contentHash": "b1d9ee7e9fec15981e7b2dd5ae8f1c48",
      "sourceName": "contracts/utils/Strings.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "StringsPlus": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Strings.sol/StringsPlus.json"
        }
      }
    },
    "contracts/utils/TransferHelper.sol": {
      "lastModificationDate": 1694677584559,
      "contentHash": "8841fd76f551f636c283681ab8fdc501",
      "sourceName": "contracts/utils/TransferHelper.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "Precision": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "TransferHelper.sol/Precision.json"
        },
        "TransferHelper": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "TransferHelper.sol/TransferHelper.json"
        }
      }
    },
    "contracts/vault/CoreVault.sol": {
      "lastModificationDate": 1698203940665,
      "contentHash": "b3196c66aab2a517ca82f41715056211",
      "sourceName": "contracts/vault/CoreVault.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/openzeppelin/ERC20.sol",
        "contracts/openzeppelin/ERC4626.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultReward.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "CoreVault": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "CoreVault.sol/CoreVault.json"
        }
      }
    },
    "contracts/vault/DeployDependency.sol": {
      "lastModificationDate": 1698203600694,
      "contentHash": "b7e73007bc91653238e2aa166f80f60b",
      "sourceName": "contracts/vault/DeployDependency.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": null,
      "artifacts": {
        "DeployDependency": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "DeployDependency.sol/DeployDependency.json"
        }
      }
    },
    "contracts/vault/ERC20.sol": {
      "lastModificationDate": 1694402779326,
      "contentHash": "382432326c36b1d26e73f240f7ba4bdf",
      "sourceName": "contracts/vault/ERC20.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC20": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "vault/ERC20.sol/ERC20.json"
        }
      }
    },
    "contracts/vault/ERC4626.sol": {
      "lastModificationDate": 1695019322241,
      "contentHash": "bc1f98c74f236752c4dcbeeba44b15d6",
      "sourceName": "contracts/vault/ERC4626.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/vault/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC4626": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "vault/ERC4626.sol/ERC4626.json"
        }
      }
    },
    "contracts/vault/RewardDistributor.sol": {
      "lastModificationDate": 1698203946197,
      "contentHash": "d2f4ab3d865a0bc377b78daf83343719",
      "sourceName": "contracts/vault/RewardDistributor.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultReward.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "RewardDistributor": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "RewardDistributor.sol/RewardDistributor.json"
        }
      }
    },
    "contracts/vault/VaultReward.sol": {
      "lastModificationDate": 1698203952403,
      "contentHash": "19798b95823dd9c8af4efbdb5299b7f1",
      "sourceName": "contracts/vault/VaultReward.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IRewardDistributor.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.9",
      "artifacts": {
        "VaultReward": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "VaultReward.sol/VaultReward.json"
        }
      }
    },
    "contracts/vault/VaultRouter.sol": {
      "lastModificationDate": 1698203959587,
      "contentHash": "6d4d9f29b1de2b71bb10a56d447a1139",
      "sourceName": "contracts/vault/VaultRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "VaultRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "VaultRouter.sol/VaultRouter.json"
        }
      }
    },
    "contracts/vault/interfaces/ICoreVault.sol": {
      "lastModificationDate": 1694402779327,
      "contentHash": "4b6a0db6957a9dcec833e5354dc2de0b",
      "sourceName": "contracts/vault/interfaces/ICoreVault.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "ICoreVault": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ICoreVault.sol/ICoreVault.json"
        }
      }
    },
    "contracts/vault/interfaces/IRewardDistributor.sol": {
      "lastModificationDate": 1694402779327,
      "contentHash": "5364b9c3a06ed35c4560339dacc00ee9",
      "sourceName": "contracts/vault/interfaces/IRewardDistributor.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IRewardDistributor": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IRewardDistributor.sol/IRewardDistributor.json"
        }
      }
    },
    "contracts/vault/interfaces/IVaultReward.sol": {
      "lastModificationDate": 1694608160257,
      "contentHash": "7142666478e6ca9946c5d051a3edeaa0",
      "sourceName": "contracts/vault/interfaces/IVaultReward.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/vault/interfaces/ICoreVault.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "IVaultReward": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IVaultReward.sol/IVaultReward.json"
        }
      }
    },
    "contracts/vault/interfaces/IVaultRouter.sol": {
      "lastModificationDate": 1698202259872,
      "contentHash": "cb6efb774316080e79ebf4d5d16419ec",
      "sourceName": "contracts/vault/interfaces/IVaultRouter.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol"
      ],
      "versionRequirement": "^0.8",
      "artifacts": {
        "IVaultRouter": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IVaultRouter.sol/IVaultRouter.json"
        }
      }
    },
    "foundry_test/test/utils/calc.sol": {
      "lastModificationDate": 1698202259873,
      "contentHash": "422920ef880f7ee47075839e39136c44",
      "sourceName": "foundry_test/test/utils/calc.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "CalcCoreVault": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "calc.sol/CalcCoreVault.json"
        }
      }
    },
    "foundry_test/test/vault/docs_test/testDocsCoreVault.t.sol": {
      "lastModificationDate": 1698202259873,
      "contentHash": "920a43a0e2c6e634cf0207ea0daf55df",
      "sourceName": "foundry_test/test/vault/docs_test/testDocsCoreVault.t.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/FeeVault.sol",
        "contracts/fee/FundFee.sol",
        "contracts/fee/FundFeeStore.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/fee/lib/FundingRateCalculator.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/market/interfaces/IMarketReader.sol",
        "contracts/mocker/MockFeeRouter.sol",
        "contracts/mocker/MockRewardDistributor.sol",
        "contracts/mocker/MockVaultRewardForCoreVault.sol",
        "contracts/mocker/MockVaultRouter.sol",
        "contracts/mocker/USDC.sol",
        "contracts/openzeppelin/ERC20.sol",
        "contracts/openzeppelin/ERC4626.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/CoreVault.sol",
        "contracts/vault/ERC20.sol",
        "contracts/vault/ERC4626.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultReward.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "foundry_test/test/utils/calc.sol",
        "lib/forge-std/lib/ds-test/src/test.sol",
        "lib/forge-std/src/Base.sol",
        "lib/forge-std/src/StdAssertions.sol",
        "lib/forge-std/src/StdChains.sol",
        "lib/forge-std/src/StdCheats.sol",
        "lib/forge-std/src/StdError.sol",
        "lib/forge-std/src/StdInvariant.sol",
        "lib/forge-std/src/StdJson.sol",
        "lib/forge-std/src/StdMath.sol",
        "lib/forge-std/src/StdStorage.sol",
        "lib/forge-std/src/StdStyle.sol",
        "lib/forge-std/src/StdUtils.sol",
        "lib/forge-std/src/Test.sol",
        "lib/forge-std/src/Vm.sol",
        "lib/forge-std/src/console.sol",
        "lib/forge-std/src/console2.sol",
        "lib/forge-std/src/interfaces/IMulticall3.sol",
        "lib/forge-std/src/safeconsole.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Counters.sol",
        "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "DocsCoreVaultTest": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "testDocsCoreVault.t.sol/DocsCoreVaultTest.json"
        }
      }
    },
    "foundry_test/test/vault/docs_test/testDocsRewardDistributor.t.sol": {
      "lastModificationDate": 1698202259873,
      "contentHash": "1b75e08fa695c62b0cc3a1de0ce969dc",
      "sourceName": "foundry_test/test/vault/docs_test/testDocsRewardDistributor.t.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/FeeRouter.sol",
        "contracts/fee/FeeVault.sol",
        "contracts/fee/FundFee.sol",
        "contracts/fee/FundFeeStore.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/interfaces/IFundFee.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/fee/lib/FundingRateCalculator.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/market/interfaces/IMarketReader.sol",
        "contracts/mocker/MockVaultRewardForCoreVault.sol",
        "contracts/mocker/USDC.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/ERC20.sol",
        "contracts/vault/ERC4626.sol",
        "contracts/vault/RewardDistributor.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultReward.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/forge-std/lib/ds-test/src/test.sol",
        "lib/forge-std/src/Base.sol",
        "lib/forge-std/src/StdAssertions.sol",
        "lib/forge-std/src/StdChains.sol",
        "lib/forge-std/src/StdCheats.sol",
        "lib/forge-std/src/StdError.sol",
        "lib/forge-std/src/StdInvariant.sol",
        "lib/forge-std/src/StdJson.sol",
        "lib/forge-std/src/StdMath.sol",
        "lib/forge-std/src/StdStorage.sol",
        "lib/forge-std/src/StdStyle.sol",
        "lib/forge-std/src/StdUtils.sol",
        "lib/forge-std/src/Test.sol",
        "lib/forge-std/src/Vm.sol",
        "lib/forge-std/src/console.sol",
        "lib/forge-std/src/console2.sol",
        "lib/forge-std/src/interfaces/IMulticall3.sol",
        "lib/forge-std/src/safeconsole.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Counters.sol",
        "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "DocsRewardDistributorTest": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "testDocsRewardDistributor.t.sol/DocsRewardDistributorTest.json"
        }
      }
    },
    "foundry_test/test/vault/docs_test/testDocsVaultReward.t.sol": {
      "lastModificationDate": 1698203799874,
      "contentHash": "20df404fc7e77d9d50db156f60d7d6e0",
      "sourceName": "foundry_test/test/vault/docs_test/testDocsVaultReward.t.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/FeeRouter.sol",
        "contracts/fee/FeeVault.sol",
        "contracts/fee/FundFee.sol",
        "contracts/fee/FundFeeStore.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/interfaces/IFundFee.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/fee/lib/FundingRateCalculator.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/market/interfaces/IMarketReader.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/mocker/MockFeeRouter.sol",
        "contracts/mocker/USDC.sol",
        "contracts/openzeppelin/ERC20.sol",
        "contracts/openzeppelin/ERC4626.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/CoreVault.sol",
        "contracts/vault/ERC20.sol",
        "contracts/vault/ERC4626.sol",
        "contracts/vault/RewardDistributor.sol",
        "contracts/vault/VaultReward.sol",
        "contracts/vault/VaultRouter.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IRewardDistributor.sol",
        "contracts/vault/interfaces/IVaultReward.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "foundry_test/test/utils/calc.sol",
        "lib/forge-std/lib/ds-test/src/test.sol",
        "lib/forge-std/src/Base.sol",
        "lib/forge-std/src/StdAssertions.sol",
        "lib/forge-std/src/StdChains.sol",
        "lib/forge-std/src/StdCheats.sol",
        "lib/forge-std/src/StdError.sol",
        "lib/forge-std/src/StdInvariant.sol",
        "lib/forge-std/src/StdJson.sol",
        "lib/forge-std/src/StdMath.sol",
        "lib/forge-std/src/StdStorage.sol",
        "lib/forge-std/src/StdStyle.sol",
        "lib/forge-std/src/StdUtils.sol",
        "lib/forge-std/src/Test.sol",
        "lib/forge-std/src/Vm.sol",
        "lib/forge-std/src/console.sol",
        "lib/forge-std/src/console2.sol",
        "lib/forge-std/src/interfaces/IMulticall3.sol",
        "lib/forge-std/src/safeconsole.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Counters.sol",
        "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "DocsVaultRewardTest": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "testDocsVaultReward.t.sol/DocsVaultRewardTest.json"
        },
        "MockForkMarket": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "testDocsVaultReward.t.sol/MockForkMarket.json"
        }
      }
    },
    "foundry_test/test/vault/docs_test/testDocsVaultRouter.t.sol": {
      "lastModificationDate": 1698203805523,
      "contentHash": "7733b7a9bb63dc3bbab9529e374ad318",
      "sourceName": "foundry_test/test/vault/docs_test/testDocsVaultRouter.t.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "contracts/ac/Ac.sol",
        "contracts/ac/AcUpgradable.sol",
        "contracts/fee/FeeRouter.sol",
        "contracts/fee/FeeVault.sol",
        "contracts/fee/FundFee.sol",
        "contracts/fee/FundFeeStore.sol",
        "contracts/fee/interfaces/IFeeRouter.sol",
        "contracts/fee/interfaces/IFeeVault.sol",
        "contracts/fee/interfaces/IFundFee.sol",
        "contracts/fee/lib/FeeRouterLib.sol",
        "contracts/fee/lib/FundingRateCalculator.sol",
        "contracts/market/MarketDataTypes.sol",
        "contracts/market/interfaces/IMarket.sol",
        "contracts/market/interfaces/IMarketCallBackIntl.sol",
        "contracts/market/interfaces/IMarketFactory.sol",
        "contracts/market/interfaces/IMarketReader.sol",
        "contracts/market/interfaces/IMarketRouter.sol",
        "contracts/market/interfaces/IMarketValid.sol",
        "contracts/mocker/MockFeeRouter.sol",
        "contracts/mocker/MockMarket.sol",
        "contracts/mocker/MockRewardDistributor.sol",
        "contracts/mocker/MockVaultRewardForCoreVault.sol",
        "contracts/mocker/USDC.sol",
        "contracts/openzeppelin/ERC20.sol",
        "contracts/openzeppelin/ERC4626.sol",
        "contracts/order/OrderLib.sol",
        "contracts/order/OrderStruct.sol",
        "contracts/order/interface/IOrderBook.sol",
        "contracts/order/interface/IOrderStore.sol",
        "contracts/position/PositionStruct.sol",
        "contracts/position/interfaces/IPositionBook.sol",
        "contracts/utils/Calc.sol",
        "contracts/utils/TransferHelper.sol",
        "contracts/vault/CoreVault.sol",
        "contracts/vault/ERC20.sol",
        "contracts/vault/ERC4626.sol",
        "contracts/vault/VaultRouter.sol",
        "contracts/vault/interfaces/ICoreVault.sol",
        "contracts/vault/interfaces/IVaultReward.sol",
        "contracts/vault/interfaces/IVaultRouter.sol",
        "lib/forge-std/lib/ds-test/src/test.sol",
        "lib/forge-std/src/Base.sol",
        "lib/forge-std/src/StdAssertions.sol",
        "lib/forge-std/src/StdChains.sol",
        "lib/forge-std/src/StdCheats.sol",
        "lib/forge-std/src/StdError.sol",
        "lib/forge-std/src/StdInvariant.sol",
        "lib/forge-std/src/StdJson.sol",
        "lib/forge-std/src/StdMath.sol",
        "lib/forge-std/src/StdStorage.sol",
        "lib/forge-std/src/StdStyle.sol",
        "lib/forge-std/src/StdUtils.sol",
        "lib/forge-std/src/Test.sol",
        "lib/forge-std/src/Vm.sol",
        "lib/forge-std/src/console.sol",
        "lib/forge-std/src/console2.sol",
        "lib/forge-std/src/interfaces/IMulticall3.sol",
        "lib/forge-std/src/safeconsole.sol",
        "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Counters.sol",
        "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
        "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol"
      ],
      "versionRequirement": "^0.8.17",
      "artifacts": {
        "MockDocsVaultRouterTest": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "testDocsVaultRouter.t.sol/MockDocsVaultRouterTest.json"
        }
      }
    },
    "lib/forge-std/lib/ds-test/src/test.sol": {
      "lastModificationDate": 1698202418355,
      "contentHash": "9febff9d09f18af5306669dc276c4c43",
      "sourceName": "lib/forge-std/lib/ds-test/src/test.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.5.0",
      "artifacts": {
        "DSTest": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "test.sol/DSTest.json"
        }
      }
    },
    "lib/forge-std/src/Base.sol": {
      "lastModificationDate": 1698202417425,
      "contentHash": "ee13c050b1914464f1d3f90cde90204b",
      "sourceName": "lib/forge-std/src/Base.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/src/StdStorage.sol",
        "lib/forge-std/src/Vm.sol"
      ],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "CommonBase": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Base.sol/CommonBase.json"
        },
        "ScriptBase": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Base.sol/ScriptBase.json"
        },
        "TestBase": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Base.sol/TestBase.json"
        }
      }
    },
    "lib/forge-std/src/StdAssertions.sol": {
      "lastModificationDate": 1698202417425,
      "contentHash": "6cc2858240bcd443debbbf075490e325",
      "sourceName": "lib/forge-std/src/StdAssertions.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/lib/ds-test/src/test.sol",
        "lib/forge-std/src/StdMath.sol"
      ],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "StdAssertions": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdAssertions.sol/StdAssertions.json"
        }
      }
    },
    "lib/forge-std/src/StdChains.sol": {
      "lastModificationDate": 1698202417425,
      "contentHash": "b0324b2e5a11948f852032aa293b3a05",
      "sourceName": "lib/forge-std/src/StdChains.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/src/Vm.sol"
      ],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "StdChains": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdChains.sol/StdChains.json"
        }
      }
    },
    "lib/forge-std/src/StdCheats.sol": {
      "lastModificationDate": 1698202417426,
      "contentHash": "d984e2c76dae07bac1e292af2a5d4fd1",
      "sourceName": "lib/forge-std/src/StdCheats.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/src/StdStorage.sol",
        "lib/forge-std/src/Vm.sol",
        "lib/forge-std/src/console2.sol"
      ],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "StdCheats": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdCheats.sol/StdCheats.json"
        },
        "StdCheatsSafe": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdCheats.sol/StdCheatsSafe.json"
        }
      }
    },
    "lib/forge-std/src/StdError.sol": {
      "lastModificationDate": 1698202417426,
      "contentHash": "64c896e1276a291776e5ea5aecb3870a",
      "sourceName": "lib/forge-std/src/StdError.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "stdError": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdError.sol/stdError.json"
        }
      }
    },
    "lib/forge-std/src/StdInvariant.sol": {
      "lastModificationDate": 1698202417426,
      "contentHash": "0a580d6fac69e9d4b6504f747f3c0c24",
      "sourceName": "lib/forge-std/src/StdInvariant.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "StdInvariant": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdInvariant.sol/StdInvariant.json"
        }
      }
    },
    "lib/forge-std/src/StdJson.sol": {
      "lastModificationDate": 1698202417426,
      "contentHash": "a341308627b7eeab7589534daad58186",
      "sourceName": "lib/forge-std/src/StdJson.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/src/Vm.sol"
      ],
      "versionRequirement": ">=0.6.0, <0.9.0",
      "artifacts": {
        "stdJson": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdJson.sol/stdJson.json"
        }
      }
    },
    "lib/forge-std/src/StdMath.sol": {
      "lastModificationDate": 1698202417426,
      "contentHash": "9da8f453eba6bb98f3d75bc6822bfb29",
      "sourceName": "lib/forge-std/src/StdMath.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "stdMath": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdMath.sol/stdMath.json"
        }
      }
    },
    "lib/forge-std/src/StdStorage.sol": {
      "lastModificationDate": 1698202417426,
      "contentHash": "abd6f3379e6e2a7979b18abc21aea0c1",
      "sourceName": "lib/forge-std/src/StdStorage.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/src/Vm.sol"
      ],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "stdStorage": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdStorage.sol/stdStorage.json"
        },
        "stdStorageSafe": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdStorage.sol/stdStorageSafe.json"
        }
      }
    },
    "lib/forge-std/src/StdStyle.sol": {
      "lastModificationDate": 1698202417426,
      "contentHash": "6281165a12aa639705c691fccefd855e",
      "sourceName": "lib/forge-std/src/StdStyle.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/src/Vm.sol"
      ],
      "versionRequirement": ">=0.4.22, <0.9.0",
      "artifacts": {
        "StdStyle": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdStyle.sol/StdStyle.json"
        }
      }
    },
    "lib/forge-std/src/StdUtils.sol": {
      "lastModificationDate": 1698202417427,
      "contentHash": "3ce83748fd76644688f916c9cced545b",
      "sourceName": "lib/forge-std/src/StdUtils.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/src/Vm.sol",
        "lib/forge-std/src/interfaces/IMulticall3.sol"
      ],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "StdUtils": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StdUtils.sol/StdUtils.json"
        }
      }
    },
    "lib/forge-std/src/Test.sol": {
      "lastModificationDate": 1698202417427,
      "contentHash": "15866901137b5670eabf31362523bd28",
      "sourceName": "lib/forge-std/src/Test.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/forge-std/lib/ds-test/src/test.sol",
        "lib/forge-std/src/Base.sol",
        "lib/forge-std/src/StdAssertions.sol",
        "lib/forge-std/src/StdChains.sol",
        "lib/forge-std/src/StdCheats.sol",
        "lib/forge-std/src/StdError.sol",
        "lib/forge-std/src/StdInvariant.sol",
        "lib/forge-std/src/StdJson.sol",
        "lib/forge-std/src/StdMath.sol",
        "lib/forge-std/src/StdStorage.sol",
        "lib/forge-std/src/StdStyle.sol",
        "lib/forge-std/src/StdUtils.sol",
        "lib/forge-std/src/Vm.sol",
        "lib/forge-std/src/console.sol",
        "lib/forge-std/src/console2.sol",
        "lib/forge-std/src/interfaces/IMulticall3.sol",
        "lib/forge-std/src/safeconsole.sol"
      ],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "Test": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Test.sol/Test.json"
        }
      }
    },
    "lib/forge-std/src/Vm.sol": {
      "lastModificationDate": 1698202417427,
      "contentHash": "eff2556a384c025f56150fb3f78de858",
      "sourceName": "lib/forge-std/src/Vm.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "Vm": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Vm.sol/Vm.json"
        },
        "VmSafe": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Vm.sol/VmSafe.json"
        }
      }
    },
    "lib/forge-std/src/console.sol": {
      "lastModificationDate": 1698202417427,
      "contentHash": "100b8a33b917da1147740d7ab8b0ded3",
      "sourceName": "lib/forge-std/src/console.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.4.22, <0.9.0",
      "artifacts": {
        "console": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "src/console.sol/console.json"
        }
      }
    },
    "lib/forge-std/src/console2.sol": {
      "lastModificationDate": 1698202417428,
      "contentHash": "491ca717c1915995e78cc361485a3067",
      "sourceName": "lib/forge-std/src/console2.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.4.22, <0.9.0",
      "artifacts": {
        "console2": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "console2.sol/console2.json"
        }
      }
    },
    "lib/forge-std/src/interfaces/IMulticall3.sol": {
      "lastModificationDate": 1698202417429,
      "contentHash": "7b131ca1ca32ef6378b7b9ad5488b901",
      "sourceName": "lib/forge-std/src/interfaces/IMulticall3.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "IMulticall3": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IMulticall3.sol/IMulticall3.json"
        }
      }
    },
    "lib/forge-std/src/safeconsole.sol": {
      "lastModificationDate": 1698202417429,
      "contentHash": "ac3b1bf5a444db5db3656021830258a8",
      "sourceName": "lib/forge-std/src/safeconsole.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": ">=0.6.2, <0.9.0",
      "artifacts": {
        "safeconsole": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "safeconsole.sol/safeconsole.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
      "lastModificationDate": 1698203005493,
      "contentHash": "a2b1ec38a8dad325a596f926890772b8",
      "sourceName": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "AccessControl": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "AccessControl.sol/AccessControl.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
      "lastModificationDate": 1698203005493,
      "contentHash": "57c84298234411cea19c7c284d86be8b",
      "sourceName": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IAccessControl": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IAccessControl.sol/IAccessControl.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "lastModificationDate": 1698203005494,
      "contentHash": "5a20b2cad87ddb61c7a3a6af21289e28",
      "sourceName": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/Context.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "Ownable": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Ownable.sol/Ownable.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
      "lastModificationDate": 1698203005498,
      "contentHash": "d151fbfe7939989b9acf22797b32058b",
      "sourceName": "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC20": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "interfaces/IERC20.sol/IERC20.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol": {
      "lastModificationDate": 1698203005499,
      "contentHash": "97b05d54ca57043277fa79b29a968da9",
      "sourceName": "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC4626": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC4626.sol/IERC4626.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
      "lastModificationDate": 1698203005499,
      "contentHash": "b1756048024350a162c3be27c04aa652",
      "sourceName": "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC5267": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC5267.sol/IERC5267.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "lastModificationDate": 1698203005508,
      "contentHash": "1535f8c0c68463f8c1b5239f7584e71f",
      "sourceName": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ReentrancyGuard": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ReentrancyGuard.sol/ReentrancyGuard.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "lastModificationDate": 1698203005510,
      "contentHash": "3ae5166c6827a9cf1a7a462d1632b464",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC20": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ERC20/ERC20.sol/ERC20.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "lastModificationDate": 1698203005510,
      "contentHash": "df36f7051335cd1e748b1b6463b7fdd3",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC20": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC20.sol/IERC20.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "lastModificationDate": 1698203005510,
      "contentHash": "a1c7f80ae26f5b2d7d563475627fbf25",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC20Burnable": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ERC20Burnable.sol/ERC20Burnable.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol": {
      "lastModificationDate": 1698203005511,
      "contentHash": "c8946432e6d37418cb12a15668e3c0cd",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Counters.sol",
        "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC20Permit": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ERC20Permit.sol/ERC20Permit.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol": {
      "lastModificationDate": 1698203005512,
      "contentHash": "6a49e30f074c0972eee2950b9c1647a1",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC4626": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "extensions/ERC4626.sol/ERC4626.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "lastModificationDate": 1698203005512,
      "contentHash": "909ab67fc5c25033fe6cd364f8c056f9",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC20Metadata": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC20Metadata.sol/IERC20Metadata.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "lastModificationDate": 1698203005512,
      "contentHash": "aa849939a4ae83a4dcb2dca9b3e9e707",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC20Permit": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC20Permit.sol/IERC20Permit.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "lastModificationDate": 1698203005512,
      "contentHash": "0ebe4a60af340ba617d3fb68db43c990",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "lib/openzeppelin-contracts/contracts/utils/Counters.sol",
        "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "draft-ERC20Permit": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "draft-ERC20Permit.sol/draft-ERC20Permit.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "lastModificationDate": 1698203005512,
      "contentHash": "a159c68235d1d18f16dd0a57a000daea",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
        "lib/openzeppelin-contracts/contracts/utils/Address.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "SafeERC20": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "SafeERC20.sol/SafeERC20.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "lastModificationDate": 1698203005513,
      "contentHash": "48de4c9a3a4ae5ef66a2aa620843413f",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC721": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC721.sol/IERC721.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
      "lastModificationDate": 1698203005513,
      "contentHash": "c22d4395e33763de693fd440c6fd10e1",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC721Receiver": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC721Receiver.sol/IERC721Receiver.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "lastModificationDate": 1698203005514,
      "contentHash": "efbc0d15b80a74e34dbe8da0f3e879bb",
      "sourceName": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC721Metadata": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC721Metadata.sol/IERC721Metadata.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "lastModificationDate": 1698203005515,
      "contentHash": "211ffd288c1588ba8c10eae668ca3c66",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.1",
      "artifacts": {
        "Address": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Address.sol/Address.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "lastModificationDate": 1698203005515,
      "contentHash": "5f2c5c4b6af2dd4551027144797bc8be",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "Context": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Context.sol/Context.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Counters.sol": {
      "lastModificationDate": 1698203005515,
      "contentHash": "74654e3ae5d7f39555055dfe244dab7a",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/Counters.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "Counters": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Counters.sol/Counters.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
      "lastModificationDate": 1698203005516,
      "contentHash": "8dde288da49722a70f34ee369be4bfba",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol"
      ],
      "versionRequirement": "^0.8.8",
      "artifacts": {
        "ShortStrings": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ShortStrings.sol/ShortStrings.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
      "lastModificationDate": 1698203005516,
      "contentHash": "682f7dd1f2e1147c8390e7575deceb2d",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "StorageSlot": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "StorageSlot.sol/StorageSlot.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "lastModificationDate": 1698203005516,
      "contentHash": "48686fc32a22a3754b8e63321857dd2a",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "Strings": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Strings.sol/Strings.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
      "lastModificationDate": 1698203005516,
      "contentHash": "d822a8a9468649cab463f29f5decf5cc",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ECDSA": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ECDSA.sol/ECDSA.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
      "lastModificationDate": 1698203005516,
      "contentHash": "459aeb9cc3fc3c6d67d30ffefb724aba",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
        "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
        "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
        "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
        "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
      ],
      "versionRequirement": "^0.8.8",
      "artifacts": {
        "EIP712": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "EIP712.sol/EIP712.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "lastModificationDate": 1698203005517,
      "contentHash": "0e7db055ce108f9da7bb6686a00287c0",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ERC165": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ERC165.sol/ERC165.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "lastModificationDate": 1698203005517,
      "contentHash": "03e6768535ac4da0e9756f1d8a4a018a",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "IERC165": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "IERC165.sol/IERC165.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "lastModificationDate": 1698203005518,
      "contentHash": "fe63409d8a06818b926cf89e0ea88b1b",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "Math": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Math.sol/Math.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
      "lastModificationDate": 1698203005518,
      "contentHash": "67cf2dfe1d1c22b4ea7f242e8a17f431",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "SafeCast": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "SafeCast.sol/SafeCast.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
      "lastModificationDate": 1698203005518,
      "contentHash": "f6f4fda16c536e57069af40a245c985e",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "SafeMath": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "SafeMath.sol/SafeMath.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
      "lastModificationDate": 1698203005518,
      "contentHash": "9488ebd4daacfee8ad04811600d7d061",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "SignedMath": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "SignedMath.sol/SignedMath.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol": {
      "lastModificationDate": 1698203005518,
      "contentHash": "f7b3809e202b5547e9ddd97aaeb1d907",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/math/SignedSafeMath.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "SignedSafeMath": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "SignedSafeMath.sol/SignedSafeMath.json"
        }
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "lastModificationDate": 1698203005519,
      "contentHash": "e029f029abc1fd2d85d54fd69086f076",
      "sourceName": "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "EnumerableSet": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "EnumerableSet.sol/EnumerableSet.json"
        }
      }
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "lastModificationDate": 1698202423316,
      "contentHash": "f0cedd674b4863ee90d1521a92ab82df",
      "sourceName": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.20",
      "artifacts": {
        "Initializable": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Initializable.sol/Initializable.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/Chainlink.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "27b16bfde0126077b2d2d065f1c74852",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/Chainlink.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "node_modules/@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "Chainlink": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "Chainlink.sol/Chainlink.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/ChainlinkClient.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "90ffe34489ecd088e574988c7520c3cb",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/ChainlinkClient.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "node_modules/@chainlink/contracts/src/v0.8/Chainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol",
        "node_modules/@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ChainlinkClient": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ChainlinkClient.sol/ChainlinkClient.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "14407a6ead15cff8a0e0a7f8037c68f5",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ChainlinkRequestInterface": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ChainlinkRequestInterface.sol/ChainlinkRequestInterface.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "62575ca6f32c34e4bc78502eabe4b261",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ENSInterface": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ENSInterface.sol/ENSInterface.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "c7277141390132f279d5fda51e6609fe",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol",
        "node_modules/@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol"
      ],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "OperatorInterface": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "OperatorInterface.sol/OperatorInterface.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "6283e42024961596926c2b5015eef8e0",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "OracleInterface": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "OracleInterface.sol/OracleInterface.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "27da4b2007d200dd5afff31dbf31ac99",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "PointerInterface": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "PointerInterface.sol/PointerInterface.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "d10c0d716a0f43bb442c14effc9bd39f",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "LinkTokenInterface": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "LinkTokenInterface.sol/LinkTokenInterface.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "52ac6f99fb0635751ae4ed11139878fd",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "BufferChainlink": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "BufferChainlink.sol/BufferChainlink.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "99b3ee2c29bc0d1a5cba583d9e8d835e",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [
        "node_modules/@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol"
      ],
      "versionRequirement": ">=0.4.19",
      "artifacts": {
        "CBORChainlink": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "CBORChainlink.sol/CBORChainlink.json"
        }
      }
    },
    "node_modules/@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol": {
      "lastModificationDate": 1697520203358,
      "contentHash": "24a98b0606654e662097eed9ffa91a11",
      "sourceName": "node_modules/@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": "^0.8.0",
      "artifacts": {
        "ENSResolver": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "ENSResolver.sol/ENSResolver.json"
        }
      }
    },
    "node_modules/hardhat/console.sol": {
      "lastModificationDate": 1684235659454,
      "contentHash": "4ff3cd2f6272c9a6516e9ee4f2b967d3",
      "sourceName": "node_modules/hardhat/console.sol",
      "solcConfig": {
        "settings": {
          "optimizer": {
            "enabled": true,
            "runs": 200
          },
          "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
          },
          "outputSelection": {
            "*": {
              "": [
                "ast"
              ],
              "*": [
                "abi",
                "evm.bytecode",
                "evm.deployedBytecode",
                "evm.methodIdentifiers",
                "metadata"
              ]
            }
          },
          "evmVersion": "paris",
          "libraries": {}
        }
      },
      "imports": [],
      "versionRequirement": null,
      "artifacts": {
        "console": {
          "0.8.21+commit.d9974bed.Darwin.appleclang": "console.sol/console.json"
        }
      }
    }
  }
}